# Build workflow

name: CI

on:
  push:
    branches:
      - main
      - 'support/v*'
    tags:
      - v* # Also version tags
  pull_request:
    types:
      - opened
      - synchronize
  merge_group:
    types:
      - checks_requested

concurrency: 
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  DEVCONTAINER_IMAGE: ghcr.io/${{ github.repository }}-devcontainer
  DEVCONTAINER_TAG: ${{ ( github.event_name == 'push' && github.ref_type == 'branch' ) && github.ref_name || 'main' }}

jobs:
  build-devcontainer:
    name: Pre-Build Devcontainer
    if: github.event_name == 'push' && github.ref_type == 'branch'
    runs-on: ubuntu-latest
    permissions:
      packages: write # For the container
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pre-build dev container image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.DEVCONTAINER_IMAGE }}
          imageTag: ${{ env.DEVCONTAINER_TAG }}
          cacheFrom: "${{ env.DEVCONTAINER_IMAGE }}:${{ env.DEVCONTAINER_TAG }}"
          push: always
      
  checks:
    name: Checks
    needs: build-devcontainer
    if: always() && !cancelled() && !failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create ssh directory
        run: |
          mkdir ~/.ssh
          chmod 0700 ~/.ssh

      - name: Lint
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.DEVCONTAINER_IMAGE }}
          cacheFrom: "${{ env.DEVCONTAINER_IMAGE }}:${{ env.DEVCONTAINER_TAG }}"
          push: never
          runCmd: poetry run ruff check

      - name: Format check
        if: github.event_name != 'push'
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.DEVCONTAINER_IMAGE }}
          cacheFrom: "${{ env.DEVCONTAINER_IMAGE }}:${{ env.DEVCONTAINER_TAG }}"
          push: never
          runCmd: poetry run ruff format --check

      - name: Unit tests
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.DEVCONTAINER_IMAGE }}
          cacheFrom: "${{ env.DEVCONTAINER_IMAGE }}:${{ env.DEVCONTAINER_TAG }}"
          push: never
          runCmd: poetry run pytest -m unit

      - name: Integration tests
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.DEVCONTAINER_IMAGE }}
          cacheFrom: "${{ env.DEVCONTAINER_IMAGE }}:${{ env.DEVCONTAINER_TAG }}"
          push: never
          runCmd: poetry run pytest -m integration

  build:
    name: Build
    needs: checks
    if: always() && !cancelled() && !failure() 
    runs-on: ubuntu-latest
    permissions:
      packages: write # For the container
      # For attestation
      id-token: write
      attestations: write
    env:
      IMAGE_FULL_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_FULL_NAME }}
          tags: |
            type=edge,branch=main
            # branch name, except main, which gets the edge label
            type=ref,event=branch,enable=${{ github.ref != format('refs/heads/{0}', 'main') }}
            # full version
            type=semver,pattern={{version}}
            # minor version
            type=semver,pattern={{major}}.{{minor}}
            # major version
            #type=semver,pattern={{major}}

      - name: Build and push
        id: image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name == 'push' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        if: github.event_name == 'push'
        uses: sigstore/cosign-installer@v3.9.1
        with:
          cosign-release: 'v2.4.1'

      - name: Sign image
        if: github.event_name == 'push'
        run: cosign sign --yes ${{ env.IMAGE_FULL_NAME }}@${{ steps.image.outputs.digest }}

      - name: Generate image attestation
        if: github.event_name == 'push' && !github.event.repository.private
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_FULL_NAME }}
          subject-digest: ${{ steps.image.outputs.digest }}
          push-to-registry: false

      - name: Generate image SBOM
        if: github.event_name == 'push' && !github.event.repository.private
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_FULL_NAME }}@${{ steps.image.outputs.digest }}
          artifact-name: sbom-image.spdx.json
          output-file: ./sbom-image.spdx.json
          upload-artifact: true
        env:
          SYFT_SELECT_CATALOGERS: +sbom-cataloger # Catalog nested SBOMs

      - name: Generate image SBOM attestation
        if: github.event_name == 'push' && !github.event.repository.private
        uses: actions/attest-sbom@v2
        with:
          subject-name: ${{ env.IMAGE_FULL_NAME }}
          subject-digest: ${{ steps.image.outputs.digest }}
          sbom-path: ./sbom-image.spdx.json
          push-to-registry: false 

  release:
    name: Release
    needs: build
    if: always() && !cancelled() && !failure() && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create release draft
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
